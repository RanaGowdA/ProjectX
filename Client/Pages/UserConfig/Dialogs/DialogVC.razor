@using CustomerRelationshipManagement.Shared.Models.AccountConfig;


<MudDialog>
    <DialogContent>

        @if (IsProjectAccount)
        {
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField Required @bind-Value="NewProjectAccount.Organization" Label="Organization" HelperText="Enter Account Organization Ex.Google" Variant="Variant.Text"
                                  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.HomeRepairService" AdornmentColor="Color.Primary" Immediate="true" />
                </MudItem>
            </MudGrid>
        }

        @if (IsSegment)
        {

            <MudGrid>
                <MudItem xs="12">
                    <MudSelect T="int" Value="NewSegment.ProjectAccountId" Label="Organization" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="0">None</MudSelectItem>
                        @foreach (ProjectAccount item in ProjectAccounts)
                        {
                            <MudSelectItem Value="@item.Id">@item.Organization</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="NewSegment.Name" Counter="@CounterLimit" MaxLength="@CounterLimit" HelperText="Enter Segment Name Ex.Energy & Transportation"
                                  Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="Segment Name" Variant="Variant.Text" />
                </MudItem>
            </MudGrid>
        }


        @if (IsDivision)
        {
            <MudGrid>
                <MudItem xs="12">
                    <MudSelect T="int" @bind-Value="NewDivision.SegmentId" Label="Segment" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="0">None</MudSelectItem>
                        @foreach (Segment item in Segments)
                        {
                            <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                @if (NewDivision.SegmentId > 0)
                {
                    var SeelctedSegmentAccount = Segments.FirstOrDefault(x => x.Id == NewLocation.SegmentId);
                    <MudTextField T="string" @bind-Value="@SeelctedSegmentAccount.ProjectAccount.Organization" Counter="@CounterLimit" MaxLength="@CounterLimit"
                                  Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="Organization" Variant="Variant.Text" />

                }
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="NewDivision.Name" Counter="@CounterLimit" MaxLength="@CounterLimit" HelperText="Enter Division Name Ex.Solar Turbine"
                                  Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="Division Name" Variant="Variant.Text" />
                </MudItem>
            </MudGrid>
        }

        @if (IsLocation)
        {
            <MudGrid>
                <MudItem xs="12">
                    <MudSelect T="int" @bind-Value="NewLocation.SegmentId" Label="Organization" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="0">None</MudSelectItem>
                        @foreach (Segment item in Segments)
                        {
                            <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                @if (NewLocation.SegmentId > 0)
                {
                    var SeelctedSegmentAccount = Segments.FirstOrDefault(x => x.Id == NewLocation.SegmentId);
                    <MudTextField T="string" @bind-Value="@SeelctedSegmentAccount.ProjectAccount.Organization" Counter="@CounterLimit" MaxLength="@CounterLimit"
                                  Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="Organization" Variant="Variant.Text" />
                }
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="NewLocation.City" Counter="@CounterLimit" MaxLength="@CounterLimit" HelperText="Enter Location Name Ex.Solar Turbine"
                                  Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="Location Name" Variant="Variant.Text" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="NewLocation.State" Counter="@CounterLimit" MaxLength="@CounterLimit" HelperText="Enter Location Name Ex.Solar Turbine"
                                  Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="State Name" Variant="Variant.Text" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="NewLocation.PostalCode" Counter="@CounterLimit" MaxLength="@CounterLimit" HelperText="Enter Location Name Ex.Solar Turbine"
                                  Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="PostalCode" Variant="Variant.Text" />
                </MudItem>
            </MudGrid>

        }


        @if (IsFunction)
        {
            <MudGrid>
                <MudItem xs="12">
                    <MudSelect T="int" @bind-Value="NewFunction.ProjectAccountId" Label="Organization" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="0">None</MudSelectItem>
                        @foreach (ProjectAccount item in ProjectAccounts)
                        {
                            <MudSelectItem Value="@item.Id">@item.Organization</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="NewFunction.Name" Counter="@CounterLimit" MaxLength="@CounterLimit" HelperText="Enter Segment Name Ex.Energy & Transportation"
                                  Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="Function Name" Variant="Variant.Text" />
                </MudItem>
            </MudGrid>
        }

        @if (IsCompatency)
        {
            <MudGrid>
                <MudItem xs="12">
                    <MudSelect T="int" @bind-Value="NewCompatency.ProjectAccountId" Label="Organization" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="0">None</MudSelectItem>
                        @foreach (ProjectAccount item in ProjectAccounts)
                        {
                            <MudSelectItem Value="@item.Id">@item.Organization</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="NewCompatency.Name" Counter="@CounterLimit" MaxLength="@CounterLimit" HelperText="Enter Segment Name Ex.Energy & Transportation"
                                  Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="Function Name" Variant="Variant.Text" />
                </MudItem>
            </MudGrid>
        }


        @if (IsEngagementModel)
        {
            <MudGrid>
                <MudItem xs="12">
                    <MudSelect T="int" @bind-Value="NewEngagement.ProjectAccountId" Label="Organization" AnchorOrigin="Origin.BottomCenter">
                        <MudSelectItem Value="0">None</MudSelectItem>
                        @foreach (ProjectAccount item in ProjectAccounts)
                        {
                            <MudSelectItem Value="@item.Id">@item.Organization</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField T="string" @bind-Value="NewEngagement.Name" Counter="@CounterLimit" MaxLength="@CounterLimit" HelperText="Enter Segment Name Ex.Energy & Transportation"
                                  Immediate="true" Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))" Label="Function Name" Variant="Variant.Text" />
                </MudItem>
            </MudGrid>
        }

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@IsInfo">Ok</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }


    #region Variables



    public int CounterLimit { get; set; }

    [Parameter]
    public bool IsProjectAccount { get; set; }
    [Parameter]
    public ProjectAccount NewProjectAccount { get; set; }
    [Parameter]
    public List<ProjectAccount>? ProjectAccounts { get; set; }



    [Parameter]
    public bool IsSegment { get; set; }
    [Parameter]
    public Segment NewSegment { get; set; }


    [Parameter]
    public List<Segment>? Segments { get; set; }


    [Parameter]
    public bool IsDivision { get; set; }
    [Parameter]
    public Division NewDivision { get; set; }


    [Parameter]
    public bool IsLocation { get; set; }
    [Parameter]
    public Location NewLocation { get; set; }


    [Parameter]
    public bool IsFunction { get; set; }
    [Parameter]
    public AccountFunction NewFunction { get; set; }
      
    [Parameter]
    public bool IsCompatency { get; set; }
    [Parameter]
    public AccountFunction NewCompatency { get; set; }

    [Parameter]
    public bool IsEngagementModel { get; set; }
    [Parameter]
    public Engagement NewEngagement { get; set; }

    [Parameter]
    public bool IsInfo { get; set; }

    private string _selectedProjectAccount = "";
    #endregion



    #region Events
    protected override async Task OnInitializedAsync()
    {
        _selectedProjectAccount = "";
        CounterLimit = 25;
        if (IsSegment && !IsInfo)
        {
            NewSegment.ProjectAccount = ProjectAccounts != null ? ProjectAccounts.FirstOrDefault() : new ProjectAccount();
            _selectedProjectAccount = NewSegment.ProjectAccount.Organization;
        }

        if (IsSegment && IsInfo)
        {
            _selectedProjectAccount = NewSegment.ProjectAccount.Organization;
        }
    }
    /// <summary>
    /// OnProject Account Selection Changed
    /// </summary>
    private void OnProjectAccountSelectionChanged(ProjectAccount projectAccount)
    {
        _selectedProjectAccount = projectAccount.Organization;
        NewSegment.ProjectAccount = projectAccount;
        NewSegment.ProjectAccountId = projectAccount.Id;
    }
    /// <summary>
    /// Restrict User Not Enter More Than @CounterLimit Characters
    /// </summary>
    /// <param name="character"></param>
    /// <returns></returns>
    private IEnumerable<string> MaxCharacters(string character)
    {
        if (!string.IsNullOrEmpty(character) && @CounterLimit < character?.Length)
        {
            yield return "Max @CounterLimit Characters";
        }
    }

    ///// <summary>
    /// When User Hits Ok/Add
    /// </summary>
    void Submit()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }


    ///// <summary>
    /// When User Hits Cancel/Close
    /// </summary>
    void Cancel()
    {
        MudDialog.Cancel();
    }




    #endregion



}
