@page "/templateConfigurationVC"

@using System.Net.Http.Json
@using CustomerRelationshipManagement.Shared.Models;
@using System.Text.Json;
@using System.Text;
@inject HttpClient httpClient

<MudDataGrid Class="pt-3 pa-4" FixedHeader="true" T="TemplateConfiguration" Items="@TemplateConfigurations" EditMode="DataGridEditMode.Form"
             StartedEditingItem="@StartedEditingItem" CanceledEditingItem="@CanceledEditingItem" CommittedItemChanges="@CommittedItemChanges"
             Bordered="true" Dense="true" EditTrigger="DataGridEditTrigger.Manual">

    <ToolBarContent>
        <MudText Typo="Typo.h4" Color="Color.Primary">TemplateConfigurations</MudText>
        <MudSpacer />
        <MudSpacer />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddTemplateConfig" Disabled>Add</MudButton>
    </ToolBarContent>

    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Id" IsEditable="false" />
        <PropertyColumn Property="x => x.Organization" Title="Name" />
        <PropertyColumn Property="x => x.Segment" Title="Segment" />
        <PropertyColumn Property="x => x.City" Title="City" />
        <PropertyColumn Property="x => x.Region" Title="Region" />
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="TemplateConfiguration" RowsPerPageString="10" />
    </PagerContent>
</MudDataGrid>

@code {
    private IEnumerable<TemplateConfiguration> TemplateConfigurations = new List<TemplateConfiguration>();
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        TemplateConfigurations = await httpClient.GetFromJsonAsync<List<TemplateConfiguration>>("api/Template/allTmpConfig");
    }

    // events
    void StartedEditingItem(TemplateConfiguration item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CanceledEditingItem(TemplateConfiguration item)
    {
        _events.Insert(0, $"Event = CanceledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CommittedItemChanges(TemplateConfiguration item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }


    public async void AddTemplateConfig()
    {

        //// create request object
        //var request = new HttpRequestMessage(HttpMethod.Post, "api/Template/addEM");

        ////PayLoad
        //TemplateConfiguration dataIdDTO = new();
        //dataIdDTO.Id = 1;

        //// set request body
        //request.Content = new StringContent(JsonSerializer.Serialize(dataIdDTO), Encoding.UTF8, "application/json");

        ////// add authorization header
        ////request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", "my-token");

        //// send request
        //var response = await httpClient.SendAsync(request);
        //if (response.IsSuccessStatusCode)
        //{
        //    var outputLeadsWithOpportunites = new List<Lead>();
        //    outputLeadsWithOpportunites = await response.Content.ReadFromJsonAsync<List<Lead>>();
        //    if (outputLeadsWithOpportunites != null)
        //    {
        //        return outputLeadsWithOpportunites;
        //    }
        //}

        //return new List<Lead>();

    }
}
