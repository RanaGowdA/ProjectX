@inherits LayoutComponentBase

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_themeManager.Theme" />
<MudAppBar Elevation="_themeManager.AppBarElevation"></MudAppBar>
<MudDrawer @bind-Open="_drawerOpen" ClipMode="_themeManager.DrawerClipMode" Elevation="_themeManager.DrawerElevation"></MudDrawer>
<MudDialogProvider />
<MudSnackbarProvider />


<MudLayout>
    <MudAppBar Elevation="1" Color="Color.Primary">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudImage Src="Images/AXISCADES_LOGO.png" Width="40" Height="40"></MudImage>
        <MudText Typo="Typo.h5" Class="ml-3">CRM</MudText>
        <MudSpacer />

        <MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" />
        <MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme" />
        <MudMenu Icon="@Icons.Material.Filled.Build" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
            <MudSwitch @bind-Checked="@_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="Dark Mode" />
            <MudMenuItem>Logout</MudMenuItem>
            <MudMenuItem>
            </MudMenuItem>
        </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Variant="@DrawerVariant.Mini" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu> </NavMenu>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>
@code {
    bool _drawerOpen = false;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private ThemeManagerTheme _themeManager = new ThemeManagerTheme();
    public bool _themeManagerOpen = false;
    private bool _isDarkMode;

    void OpenThemeManager(bool value)
    {
        _themeManagerOpen = value;
    }

    void UpdateTheme(ThemeManagerTheme value)
    {
        _themeManager = value;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        StateHasChanged();
    }
}